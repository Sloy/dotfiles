[user]
	name = Rafa Vázquez
	email = rafa.vazsan@gmail.com

[core]
	excludefile = ~/.gitignore
	excludesfile = ~/.gitignore_global
	editor = micro
	precomposeunicode = true
	autocrlf = input
	ignorecase = false
	# Make `git rebase` safer on macOS
	# More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
	trustctime = false

[color]
	ui = true

[color "branch"]
	current = yellow reverse
	local = yellow
	remote = green

[color "status"]
	added = green
	changed = yellow
	untracked = cyan

[apply]
	# Detect whitespace errors when applying a patch
	whitespace = fix

[alias]
	co = checkout
	ci = commit
	cim = commit -m
	st = status
	br = branch
	hist = log --pretty=format:\"%h %ad | %s%d [%an]\" --graph --date=short
	type = cat-file -t
	dump = cat-file -p
	graph = log --graph --pretty=oneline --abbrev-commit

	# Amends last commit with the index skipping the message editting
  	amend = commit --amend --no-edit

	# Destroys all tracked and untracked changes
  	fire = "!f() { git reset --hard; git clean -f -d; }; f"

	# Deletes local merged branches except for master and develop
  	bclean = "!git branch --merged | grep -v \"*\" | grep -v master | grep -v develop | xargs -n 1 git branch -d"

	# Deletes local merged branches (bclean) and branches remote references to deleted branches
  	roomba = "!f() { git fetch --prune; git bclean ; }; f"

	# Deletes a branch locally and remotely (forced)
  	nuke = !sh -c 'git branch -D $1 && git push origin :$1' -

	# Force delete all local branches except master
	deletebranches = "!f() { git branch | grep -v \"master\" | xargs git branch -D; }; f"

	# Commits current changes with a "WIP" message
	wip = commit -a -m "WIP"

	# Soft resets last commit (reverses the command wip)
	unwip = reset --soft HEAD^

	# Forced push variant that checks for unknown changes in remote
	pushf = push --force-with-lease

	# Pushes the current branch to a new remote branch in origin and track it
	pushr = "!f() { git rev-parse --abbrev-ref HEAD | xargs git push -u origin; }; f"

	# Pulls the master branch and leaves you in the current branch
	pullmaster = "!f() { git checkout master && git pull && git checkout -; }; f"

	# Show verbose output about tags, branches or remotes
	tags = tag -l
	branches = branch -a
	remotes = remote -v

	# Interactive rebase with the given number of latest commits
	ri = "!r() { git rebase -i HEAD~$1; }; r"

	rc = "rebase --continue"

	# Interactive rebase from master to the current commit
	ribranch = "!r() { git rebase -i $(git merge-base master HEAD); }; r"

	# Squash the current branch into 1 commit since the first common ancestor of master
	squashbranch = "!r() { CUR=`git rev-parse HEAD`; git reset --soft $(git merge-base master HEAD); git commit -m \"$(git log --format=%B ${1}..${CUR})\"; }; r"

	# Amend an older commit. Usage: git fixup <commit-ref>. From https://blog.filippo.io/git-fixup-amending-an-older-commit/
	fixup = "!f() { TARGET=$(git rev-parse "$1"); git commit --fixup=$TARGET ${@:2} && EDITOR=true git rebase -i --autostash --autosquash $TARGET^; }; f"

	# Find tags containing commit
	ft = "!f() { git describe --always --contains $1; }; f"

	# List contributors with number of commits
	contributors = shortlog --summary --numbered

	# Prints the body of all commits since last tag (PR title when used with GitHub merge&squash)
	changelog = "!f() { git describe --abbrev=0 --tags | xargs -I {} git log {}..HEAD --format=%s; }; f"

	# Push tags and master after preparing a release
	release = "!f() { git push --tags && git push origin master; }; f"

[push]
	default = simple
[diff]
	indentHeuristic = on
	compactionHeuristic = on
[pager]
	branch = false
